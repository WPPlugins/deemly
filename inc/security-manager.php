<?php
// Exit if accessed directly
if ( ! defined( 'ABSPATH' ) ) exit;

/**
 * Token-based authentication for REST web services.
 */

class SecurityManager{
    const expirationMinutes = 10;

    var $expectedApplicationId;
    var $secretKey;
    var $salt;

    /**
     * SecurityManager constructor.
     */
    public function __construct($expectedApplicationId, $salt, $secretKey) {
        $this->expectedApplicationId = $expectedApplicationId;
        $this->salt = $salt;
        $this->secretKey = $secretKey;
    }

    /**
     * Generate 32 cryptographically secure random bytes and return as base64 string.
     *
     * @return string
     */
    public function ComputeSecureString() {
        $tokenData = random_bytes(32);
        return base64_encode($tokenData);
    }

    /**
     *
     * Generates a token to be used in API calls.
     * The token is generated by hashing a message with a key, using HMAC SHA256.
     * The message is: appId:userAgent:timeStamp
     * The key is: secretKey:salt
     * The resulting token is then concatenated with appId:timeStamp and the result base64 encoded.
     *
     * API calls may then be validated by:
     *  1. Base64 decode the string, obtaining the token, appId, and timeStamp.
     *  2. Ensure the timestamp is not expired.
     *  2. Lookup the user's secretKey from the db (cached).
     *  3. Hash the appId:userAgent:timeStamp with the key of secretKey:salt to compute a token.
     *  4. Compare the computed token with the one supplied and ensure they match.
     *
     * @param $appId
     * @param $secretKey
     * @param $userAgent
     * @param $ticks
     *
     * @return string
     */
    public function GenerateToken($appId, $secretKey, $userAgent, $ticks) {
        $hash = "$appId:$userAgent:$ticks";
        $hashedKey = $this->GetHashedSecret($secretKey);
        $hashLeft = base64_encode(hash_hmac("sha256", $hash, $hashedKey, true));
        $hashRight = "$appId:$ticks";
        $result = base64_encode("$hashLeft:$hashRight");
        return $result;
    }

    /**
     * Returns a hashed appId + salt, to be used in generating a token.
     *
     * @param $key string - user's secret key
     *
     * @return string
     */
    public function GetHashedSecret($key) {
        $secretKey = "$key:" . $this->salt;
        return base64_encode(hash_hmac("sha256", $secretKey, $this->salt, true));
    }
}